#!/bin/bash
source ./install.source.sh


function enable_docker_managment_as_nonroot_user() {
  # Manage Docker as a non-root user
  # https://docs.docker.com/install/linux/linux-postinstall/
  # The docker daemon binds to a Unix socket instead of a TCP port.
  # By default that Unix socket is owned by the user root and other
  # users can only access it using sudo. The docker daemon always runs as the root user.
  # If you donâ€™t want to use sudo when you use the docker command, create a Unix group 
  # called docker and add users to it. When the docker daemon starts, it makes 
  # the ownership of the Unix socket read/writable by the docker group.
  local -r user="${1:?[ERROR] user not provided}"
  groupadd docker;
  usermod -aG docker "${user}";
  
  #Log out and log back in so that your group membership is re-evaluated.
  #If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.
  #On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.
}

# https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-repository
function install_docker() {
  # SET UP THE REPOSITORY
  apt-get update;
  apt-get -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common;
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -;
 add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable";
 
  # INSTALL DOCKER CE
  apt-get update;
  apt-get -y install docker-ce;
}

# https://docs.docker.com/compose/install/#install-compose
function install_docker_compose() {
  local -r release_url=$(final_url https://github.com/docker/compose/releases/latest)
  local -r tag="${release_url##*/}";
  local -r download_url="https://github.com/docker/compose/releases/download/${tag}/docker-compose-$(uname -s)-$(uname -m)";
  
  sudo curl -Ls "${download_url}" -o '/usr/local/bin/docker-compose'
  chmod +x '/usr/local/bin/docker-compose'
}

function configure_docker_daemon_proxy() {  
  local -r docker_proxy="${http_proxy}";  
  if [ -z "${docker_proxy}" ]; then
    return 0;
  fi
  
  # Configure Docker daemon to use a proxy server 
  # https://docs.docker.com/config/daemon/systemd/#httphttps-proxy
  local -r daemon_config_directory="/etc/systemd/system/docker.service.d";
  local -r daemon_config_file="${daemon_config_directory}/http-proxy.conf";
  
  mkdir -p "${daemon_config_directory}";
  if [ -f "${daemon_config_file}" ]; then
    mv -f "${daemon_config_file}" "${daemon_config_file}.backup";
  fi;
  echo "[Service]"  >> "${daemon_config_file}";
  echo "Environment=\"HTTP_PROXY=${docker_proxy}\"" >> "${daemon_config_file}";
    
  # Flush changes:
  systemctl daemon-reload
  
  # Restart Docker
  systemctl restart docker
}

function configure_docker_containers_proxy() {
  local -r user="${1:?[ERROR] user not provided}";
  
  local docker_proxy="${http_proxy}";
  local docker_noproxy="${no_proxy}";

  # https://danielksan81.wordpress.com/2015/05/22/configure-docker-to-use-a-proxy-inside-of-a-container/
  # if we use cntlm on docker-host then 'localhost' is contextual so we must determine docker ip  
  local -r cntlm_conf="/etc/cntlm.conf";
  if [ -f "${cntlm_conf}" ]; then
    local ip=$(ifconfig | grep -A1 ^docker | grep 'inet addr' | grep -o -E 'inet addr:[0-9.]*' | cut -d : -f 2);
    local port=3128;
    ./configure-cntlm-listen-add "${ip}:${port}";
    docker_proxy="http://${ip}:${port}";
  fi
  
  if [ -z "${docker_proxy}" ]; then
    return 0;
  fi
  
  # Configure docker containers to use a proxy server
  # https://docs.docker.com/network/proxy/
  local -r directory="/home/${user}/.docker";
  local -r file="${directory}/config.json";
  
  mkdir --mode=777 -p "${directory}";
  if [ -f "${file}" ]; then
    mv -f "${file}" "${file}.backup";
  fi;
  
  echo '{' >> "${file}";
  echo ' "proxies":' >> "${file}";
  echo '  {' >> "${file}";
  echo '   "default":' >> "${file}";
  echo '    {' >> "${file}";
  echo "     \"httpProxy\": \"${docker_proxy}\"," >> "${file}";
  echo "     \"httpsProxy\": \"${docker_proxy}\"," >> "${file}";
  echo "     \"noProxy\": \"${docker_noproxy}\"" >> "${file}";
  echo '    }' >> "${file}";
  echo '  }' >> "${file}";
  echo '}' >> "${file}";
  
  chown "$user":"$user" "${directory}" -R
  chmod g+rwx "${directory}" -R
}

function configure_docker_proxy() {  
  configure_docker_daemon_proxy "$@";
  configure_docker_containers_proxy "$@";
}

function main() {
  enable_docker_managment_as_nonroot_user "$@";
  install_docker "$@";
  install_docker_compose "$@";
  configure_docker_proxy "$@";
}

main "$@";
